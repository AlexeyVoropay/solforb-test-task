@page "/clients/{Condition:int}"
@using SolforbTestTask.Data
@attribute [StreamRendering]
@inject NavigationManager NavigationManager

<PageTitle>Клиенты</PageTitle>

<h1>Клиенты</h1>

@* <p>This component demonstrates showing data.</p> *@

@if (clients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(Condition == 1)
    {
        <NavLink class="btn btn-success" href="clients/form/00000000-0000-0000-0000-000000000000">Добавить</NavLink>
        <NavLink class="btn btn-warning" href="clients/2">К архиву</NavLink>
    }
    else if (Condition == 2)
    {
        <NavLink class="btn btn-primary" href="clients/1">К рабочим</NavLink>
    }
    else
    {
        @* <p>Условие не распознано. Пожалуйста, проверьте URL.</p> *@
    }    

    <table class="table">
        <thead>
            <tr>
                <th>Наименование</th>
                <th>Адрес</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td @onclick="() => Open(client.Guid)">@client.Name</td>
                    <td @onclick="() => Open(client.Guid)">@client.Address</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public int Condition { get; set; }

    private Client[]? clients;

    public async Task Open(Guid guid)
    {
        NavigationManager.NavigateTo($"clients/form/{guid}");
    }

    // public async Task Open()
    // {
    //     NavigationManager.NavigateTo($"clients/form/{Guid.Empty}");
    // }

    protected override async Task OnInitializedAsync()
    {
        //// Simulate asynchronous loading to demonstrate streaming rendering
        //await Task.Delay(500);

       clients = await new Client().GetClientsAsync(Condition);
    }
}
