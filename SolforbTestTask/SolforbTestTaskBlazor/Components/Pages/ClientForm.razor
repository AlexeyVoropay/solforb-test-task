@page "/clients/form/{ClientId:guid}"
@using SolforbTestTask.Data
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@preservewhitespace true

<PageTitle>Клиент</PageTitle>

<h1>Клиент</h1>

<form method="post" @onsubmit="Submit" @formname="ClientForm">
    <AntiforgeryToken />
    <div>
        <button @onclick="() => Click()" class="btn btn-success" name="Action" value="save">Сохранить</button>
        @if (ClientId != Guid.Empty)
        {
            <button @onclick="() => Delete()" class="btn btn-danger" type="submit" name="Action" value="delete">Удалить</button>
            <button @onclick="() => Archive()" class="btn btn-warning" type="submit" name="Action" value="archive">В архив</button>
        }
    </div>
    <div>
        Наименование
    </div>
    <div>
        <InputText @bind-Value="client!.Name" />
    </div>
    <div>
        Адрес
    </div>
    <div>
        <InputText @bind-Value="client!.Address" />
    </div>
</form>


@code {
    [SupplyParameterFromForm]
    public string Action { get; set; }

    private async Task Submit()
    {
        if (Action == "save")
        {
            var result = new Client().SaveClientAsync(client).GetAwaiter().GetResult();
            NavigationManager.NavigateTo("/clients/1", true);
        }
        if (Action == "delete")
        {
            var result = new Client().SaveClientAsync(client).GetAwaiter().GetResult();
            NavigationManager.NavigateTo("/clients/1", true);
        }
        if (Action == "archive")
        {
            client.Condition = 2;
            var result = new Client().SaveClientAsync(client).GetAwaiter().GetResult();
            NavigationManager.NavigateTo("/clients/2", true);
        }
    }

    [Parameter]
    public Guid ClientId { get; set; }

    [SupplyParameterFromForm]
    private Client client { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (ClientId == Guid.Empty)
            return;
        //Model.Guid = ClientId.ToString();

        //// Simulate asynchronous loading to demonstrate streaming rendering
        //await Task.Delay(500);

        client = await new Client().GetClientAsync(ClientId) ?? new();
    }

    public async Task Click()
    {
        var result = await new Client().SaveClientAsync(client);
        NavigationManager.NavigateTo($"/clients/{client.Condition}", true);
    }

    public async Task Delete()
    {
        var result = await new Client().DeleteClientAsync(client.Guid);
        NavigationManager.NavigateTo($"/clients/{client.Condition}", true);
    }

    public async Task Archive()
    {
        client.Condition = 2;
        var result = await new Client().SaveClientAsync(client);
        NavigationManager.NavigateTo("/clients/2", true);
    }
        
}
